from sqlalchemy import (
    Column, Integer, String, DateTime, Date, Text, Boolean, ForeignKey, SmallInteger, CHAR, Float, Double, Enum, Index, Time
)
from sqlalchemy.orm import relationship
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()


class Person(Base):
    __tablename__ = 'Person'

    id = Column(Integer, primary_key=True, autoincrement=True)
    createDatetime = Column(DateTime, nullable=False, comment='Дата создания записи')
    createPerson_id = Column(Integer, ForeignKey('Person.id'), comment='Автор записи {Person}')
    modifyDatetime = Column(DateTime, nullable=False, comment='Дата изменения записи')
    modifyPerson_id = Column(Integer, ForeignKey('Person.id'), comment='Автор изменения записи {Person}')
    deleted = Column(Boolean, nullable=False, default=False, comment='Отметка удаления записи')
    code = Column(String(12), nullable=False, comment='Код')
    federalCode = Column(String(16), nullable=False, comment='Какой-то федеральный код')
    regionalCode = Column(String(16), nullable=False, comment='Какой-то региональный код')
    lastName = Column(String(30), nullable=False, comment='Фамилия')
    firstName = Column(String(30), nullable=False, comment='Имя')
    patrName = Column(String(30), nullable=False, comment='Отчество')
    post_id = Column(Integer, ForeignKey('rbPost.id'), comment='Должность {rbPost}')
    speciality_id = Column(Integer, ForeignKey('rbSpeciality.id'), comment='Специальность {rbSpeciality}')
    org_id = Column(Integer, ForeignKey('Organisation.id'), comment='Место работы {Organisation}')
    orgStructure_id = Column(Integer, ForeignKey('OrgStructure.id'), comment='Организационная структура {OrgStructure}')
    office = Column(String(8), nullable=False, comment='Кабинет')
    office2 = Column(String(8), nullable=False, comment='Кабинет2')
    tariffCategory_id = Column(Integer, ForeignKey('rbTariffCategory.id', ondelete='SET NULL'),
                               comment='Тарифная категория {rbTariffCategory}')
    finance_id = Column(Integer, ForeignKey('rbFinance.id'), comment='Тип финансирования для Visit {rbFinance}')
    retireDate = Column(Date, comment='Дата, после которой на сотрудника нельзя подавать сведения')
    ambPlan = Column(SmallInteger, nullable=False, comment='Количество человек на весь амбулаторный приём')
    ambPlan2 = Column(SmallInteger, nullable=False, comment='Количество человек на весь амбулаторный приём')
    ambNorm = Column(SmallInteger, nullable=False, comment='Норма амбулаторного приёма на 1 час')
    homPlan = Column(SmallInteger, nullable=False, comment='Количество человек на весь д.приём')
    homPlan2 = Column(SmallInteger, nullable=False, comment='Количество человек на вызов')
    homNorm = Column(SmallInteger, nullable=False, comment='Норма д.приёма на 1 час')
    expPlan = Column(SmallInteger, nullable=False, comment='Количество человек на экспертизу')
    expNorm = Column(SmallInteger, nullable=False, comment='Норма экспертизы на 1 час')
    login = Column(String(32), nullable=False, comment='имя для входа в систему')
    password = Column(String(64), nullable=False, default='', comment='hash от пароля')
    userProfile_id = Column(Integer, ForeignKey('rbUserProfile.id', ondelete='SET NULL'),
                            comment='Ссылка на профиль прав доступа {rbUserProfile}')
    retired = Column(Boolean, nullable=False, comment='Вход в систему запрещён')
    birthDate = Column(Date, nullable=False, comment='Дата рождения')
    birthPlace = Column(String(64), nullable=False, comment='Место рождения')
    sex = Column(SmallInteger, nullable=False, comment='Пол (0-неопределено, 1-М, 2-Ж)')
    SNILS = Column(CHAR(11), nullable=False, comment='СНИЛС')
    INN = Column(CHAR(15), nullable=False, comment='ИНН')
    availableForExternal = Column(SmallInteger, nullable=False, default=1, comment='Доступно для внешних систем')
    lastAccessibleTimelineDate = Column(Date, comment='Последняя доступная дата в расписании врача')
    timelineAccessibleDays = Column(Integer, nullable=False, default=0,
                                    comment='Количество дней, на которые доступно расписание врача')
    canSeeDays = Column(Integer, nullable=False, default=0, comment='Ограничение количества дней')
    academicDegree = Column(SmallInteger, nullable=False, comment='Ученая степень (0-неопределено, 1-к.м.н, 2-д.м.н)')
    typeTimeLinePerson = Column(Integer, nullable=False, comment='Тип персонального графика')
    addComment = Column(Boolean, nullable=False, default=False,
                        comment='флаг необходимости добавления комментария пользователя')
    commentText = Column(String(200), comment='Текст комментария пользователя')
    maritalStatus = Column(Integer, nullable=False, default=0, comment='Состояние в браке (ОКИН 10)')
    contactNumber = Column(String(15), nullable=False, default='', comment='Телефон')
    regType = Column(Boolean, nullable=False, default=False, comment='Тип регистрации')
    regBegDate = Column(Date, comment='Дата начала регистрации')
    regEndDate = Column(Date, comment='Дата окончания регистрации')
    isReservist = Column(Boolean, nullable=False, default=False, comment='Военнообязан (0-не известно, 1-нет, 2-да)')
    employmentType = Column(SmallInteger, nullable=False, default=0, comment='Режим работы')
    occupationType = Column(SmallInteger, nullable=False, default=0, comment='Тип занятия должности')
    citizenship_id = Column(Integer, ForeignKey('rbCitizenship.id'), comment='Гражданство {rbCitizenship}')
    isDefaultInHB = Column(Boolean, nullable=False, default=True, comment='0 - не фильтровать; 1 - фильтровать')
    isInvestigator = Column(Boolean, comment='Является главным исследователем')
    syncGUID = Column(String(36), comment='Используется при синхронизации справочников в 1С')
    qaLevel = Column(SmallInteger,
                     comment='Уровень внутренного контроля качества {0: не задано, 1: первый, 2: второй, 3: врачебная комиссия}')
    signature_cert = Column(Text, comment='Сертификат электронной подписи в формате PEM')
    signature_key = Column(Text, comment='Приватный ключ электронной подписи в формате PEM')
    cashier_code = Column(Integer, comment='ID кассира')
    doctorRoomAccessDenied = Column(Boolean, nullable=False, default=False, comment='Вход в DoctorRoom запрещен')
    availableForScoreboard = Column(SmallInteger, nullable=False, default=1, comment='Дать в табло')
    ecp_password = Column(String(100), default='', comment='Пароль от ЭЦП (если есть)')
    grkmGUID = Column(String(45), comment='GUID врача ГРКМ')
    ready_to_online_consultation = Column(SmallInteger, nullable=False, default=0,
                                          comment='Готовность к онлайн-консультациям')
    disableSignDoc = Column(Boolean, nullable=False, default=False,
                            comment='Запрещать подписывать документы этого врача')
    defaultPrinter_id = Column(Integer, ForeignKey('OrgStructure_Printers.id', ondelete='SET NULL'),
                               comment='Дефолтный принтер штрих-кодов для сотрудника')
    qualification = Column(String(100), comment='Квалификация Врача')
    mse_speciality_id = Column(Integer, comment='ID специальности МСЭ')
    email = Column(String(64), comment='Электронная почта')

    creator = relationship('Person', foreign_keys=[createPerson_id], remote_side=[id], backref='created_records')
    modifier = relationship('Person', foreign_keys=[modifyPerson_id], remote_side=[id], backref='modified_records')
    # post = relationship('rbPost', backref='persons')
    # speciality = relationship('rbSpeciality', backref='persons')
    # organisation = relationship('Organisation', backref='persons')
    # org_structure = relationship('OrgStructure', backref='persons')
    # tariff_category = relationship('rbTariffCategory', backref='persons')
    # finance = relationship('rbFinance', backref='persons')

    def __repr__(self):
        return f"<Person(id={self.id}, lastName={self.lastName}, firstName={self.firstName})>"


class Event(Base):
    __tablename__ = 'Event'

    id = Column(Integer, primary_key=True, autoincrement=True)
    createDatetime = Column(DateTime, nullable=False, comment='Дата создания записи')
    createPerson_id = Column(Integer, ForeignKey('Person.id'), nullable=True, comment='Автор записи {Person}')
    modifyDatetime = Column(DateTime, nullable=False, comment='Дата изменения записи')
    modifyPerson_id = Column(Integer, ForeignKey('Person.id'), nullable=True, comment='Автор изменения записи {Person}')
    deleted = Column(Boolean, default=False, nullable=False, comment='Отметка удаления записи')
    externalId = Column(String(30), nullable=False, comment='Внешний идентификатор')
    eventType_id = Column(Integer, ForeignKey('EventType.id'), nullable=False, comment='Тип события {EventType}')
    org_id = Column(Integer, ForeignKey('Organisation.id'), nullable=True, comment='Место проведения {Organisation}')
    client_id = Column(Integer, ForeignKey('Client.id'), nullable=True, comment='Пациент {Client}')
    contract_id = Column(Integer, ForeignKey('Contract.id'), nullable=True, comment='Договор {Contract}')
    prevEventDate = Column(DateTime, nullable=True, comment='Дата предыдущего события')
    setDate = Column(DateTime, nullable=False, comment='Дата начала')
    setPerson_id = Column(Integer, ForeignKey('Person.id'), nullable=True, comment='Направивший сотрудник {Person}')
    execDate = Column(DateTime, nullable=True, comment='Дата выполнения')
    execPerson_id = Column(Integer, ForeignKey('Person.id'), nullable=True, comment='Выполнивший сотрудник {Person}')
    isPrimary = Column(Boolean, nullable=False, comment='Признак первичности')
    order = Column(Integer, nullable=False, comment='Порядок наступления')
    result_id = Column(Integer, ForeignKey('rbResult.id'), nullable=True, comment='Результат {rbResult}')
    nextEventDate = Column(DateTime, nullable=True, comment='Дата следующей явки')
    payStatus = Column(Integer, nullable=False, comment='Флаги финансирования')
    typeAsset_id = Column(Integer, ForeignKey('rbEmergencyTypeAsset.id'), nullable=True, comment='Тип актива {rbEmergencyTypeAsset}')
    note = Column(Text, nullable=False, comment='Примечание')
    curator_id = Column(Integer, ForeignKey('Person.id'), nullable=True, comment='Куратор {Person}')
    assistant_id = Column(Integer, ForeignKey('Person.id'), nullable=True, comment='Ассистент {Person}')
    pregnancyWeek = Column(Integer, default=0, nullable=False, comment='Срок беременности')
    MES_id = Column(Integer, ForeignKey('mes.MES.id'), nullable=True, comment='МЭС {mes.MES}')
    HTG_id = Column(Integer, ForeignKey('mes.mrbHigtTechGroups.id'), nullable=True, comment='ВМП {mes.mrbHigtTechGroups}')
    KSG_id = Column(Integer, ForeignKey('mes.mrbClinicalStatisticalGroups.id'), nullable=True, comment='КСГ {mes.mrbClinicalStatisticalGroups}')
    mesSpecification_id = Column(Integer, ForeignKey('rbMesSpecification.id'), nullable=True, comment='Особенность выполнения МЭС {rbMesSpecification}')
    relegateOrg_id = Column(Integer, ForeignKey('Organisation.id'), nullable=True, comment='Направитель {Organisation}')
    totalCost = Column(Float, nullable=False, comment='Сумма по услугам')
    patientModel_id = Column(Integer, ForeignKey('rbPatientModel.id'), nullable=True, comment='Модель пациента {rbPatientModel}')
    cureType_id = Column(Integer, ForeignKey('rbCureType.id'), nullable=True, comment='Вид лечения {rbCureType}')
    cureMethod_id = Column(Integer, ForeignKey('rbCureMethod.id'), nullable=True, comment='Метод лечения {rbCureMethod}')
    prevEvent_id = Column(Integer, ForeignKey('Event.id'), nullable=True, comment='Является продолжением События {Event}')
    goal_id = Column(Integer, ForeignKey('rbEventGoal.id'), nullable=True, comment='Цель обращения {rbEventGoal}')
    hmpKind_id = Column(Integer, ForeignKey('rbHighTechCureKind.id'), nullable=True, comment='Вид высокотехнологичной помощи {rbHighTechCureKind}')
    hmpMethod_id = Column(Integer, ForeignKey('rbHighTechCureMethod.id'), nullable=True, comment='Метод высокотехнологичной помощи {rbHighTechCureMethod}')
    outgoingOrg_id = Column(Integer, ForeignKey('Organisation.id'), nullable=True, comment='Организация, в которую направлен пациент')
    outgoingRefNumber = Column(String(10), nullable=True, default='', comment='Номер исходящего направления')
    referral_id = Column(Integer, ForeignKey('Referral.id'), nullable=True, comment='Направление {Referral}')
    littleStranger_id = Column(Integer, ForeignKey('Event_LittleStranger.id'), nullable=True)
    eventCostPrinted = Column(Boolean, default=False, nullable=False, comment='Справка о стоимости была распечатана')
    exposeConfirmed = Column(Boolean, default=False, nullable=False, comment='Добавлять ли событие к выставлению в счет')
    ZNOFirst = Column(Boolean, default=False, nullable=True, comment='ЗНО установлен впервые')
    ZNOMorph = Column(Boolean, default=False, nullable=True, comment='ЗНО подтверждено морфологически')
    hospParent = Column(Boolean, default=False, nullable=False, comment='Госпитализация с родителем/представителем')
    clientPolicy_id = Column(Integer, ForeignKey('ClientPolicy.id'), nullable=True, comment='Полис пациента {ClientPolicy}')
    cycleDay = Column(Integer, nullable=True, comment='День цикла (для беременных)')
    locked = Column(Boolean, nullable=True, comment='Обращение заблокировано для редактирования')
    dispByMobileTeam = Column(Boolean, default=False, nullable=False, comment='Проведено мобильной выездной бригадой')
    orgStructure_id = Column(Integer, ForeignKey('OrgStructure.id'), nullable=True, comment='Подразделение {OrgStructure}')
    MSE = Column(Boolean, default=False, nullable=False, comment='Передано направление на МСЭ')
    isClosed = Column(Boolean, default=False, nullable=False, comment='Закрыто событие или нет')
    vista_system = Column(Integer, default=0, nullable=True, comment='Система обращения')
    isStage = Column(Boolean, default=False, nullable=True, comment='Этапное лечение')
    isCrime = Column(Boolean, default=False, nullable=True, comment='Криминальный случай')
    isIllegalActions = Column(Boolean, default=False, nullable=True)
    signedDocuments = Column(Boolean, default=False, nullable=False, comment='Отметка об успешном подписании документа')
    signDateTime = Column(DateTime, nullable=True, comment='Дата подписи')
    KSGCriterion = Column(Integer, default=0, nullable=True, comment='Дополнительный критерий КСГ')
    transfId = Column(Integer, ForeignKey('rbTransf.id'), nullable=True, comment='Признак поступления')
    secretary_id = Column(Integer, ForeignKey('Person.id'), nullable=True, comment='Секретарь Госпитальной Комиссии {Person}')
    kslp_coefficient = Column(Float, nullable=True)
    journalNum = Column(Integer, default=0, nullable=True)
    fixate = Column(Boolean, default=False, nullable=False)
    doesPatientNeedToSickLeave = Column(Boolean, nullable=True)
    chemoComment = Column(String(100), nullable=True)
    doseReduction = Column(String(100), default='0', nullable=True)
    doseReductionReason = Column(String(100), nullable=True)
    drugScheme_id = Column(Integer, nullable=True)
    parentEvent_id = Column(Integer, ForeignKey('Event.id'), nullable=True, comment='id родительского события {Event}')
    UUID = Column(String(36), nullable=True)
    isMovedToMSE = Column(Boolean, default=False, nullable=True, comment='Для экспорта')
    FLCStatus = Column(Integer, default=0, nullable=True)
    relation_id = Column(Integer, nullable=True)
    odiReferral_id = Column(Integer, ForeignKey('Referral.id'), nullable=True, comment='Направление ОДИ')
    canBeReexposed = Column(Boolean, default=False, nullable=True)
    armyReferral_id = Column(Integer, ForeignKey('Referral.id'), nullable=True)
    duration = Column(Integer, nullable=True)
    client_contact_id = Column(Integer, nullable=True)
    ZNOSuspicion = Column(Boolean, default=False, nullable=True, comment='Подозрение на ЗНО')
    isOncology = Column(Boolean, default=False, nullable=True, comment='Онкология')

    creator = relationship('Person', foreign_keys=[createPerson_id], backref='created_events')
    modifier = relationship('Person', foreign_keys=[modifyPerson_id], backref='modified_events')
    set_person = relationship('Person', foreign_keys=[setPerson_id], backref='set_events')
    exec_person = relationship('Person', foreign_keys=[execPerson_id], backref='exec_events')
    assistant = relationship('Person', foreign_keys=[assistant_id], backref='assisted_events')
    curator = relationship('Person', foreign_keys=[curator_id], backref='curated_events')

    def __repr__(self):
        return f"<Event(id={self.id}, externalId={self.externalId}, setDate={self.setDate})>"


class SignedIEMKDocument(Base):
    __tablename__ = 'SignedIEMKDocument'

    id = Column(Integer, primary_key=True, autoincrement=True)
    client_id = Column(Integer, ForeignKey('Client.id'), nullable=False, comment='Пациент {Client}')
    event_id = Column(Integer, ForeignKey('Event.id'), nullable=True, comment='Обращение {Event}')
    action_id = Column(Integer, ForeignKey('Action.id'), nullable=True, comment='Действие {Action}')
    person_id = Column(Integer, ForeignKey('Person.id'), nullable=True, comment='Врач, подписавший документ {Person}')
    sign_date = Column(DateTime, nullable=True, comment='Дата и время подписания документа')
    deleted = Column(Integer, default=0, nullable=False, comment='Отметка об удалении')
    document_code = Column(String(64), nullable=True, comment='Код документа')
    txt = Column(Text, nullable=False, comment='Содержимое документа в формате txt')
    file_id = Column(Integer, ForeignKey('ClientFile.id'), nullable=False, comment='ID файла-документа {ClientFile}')
    sign_id = Column(Integer, ForeignKey('ClientFile.id'), nullable=False, comment='ID файла-подписи {ClientFile}')
    html = Column(Text, nullable=False, comment='Содержимое документа в формате html')
    template_id = Column(Integer, ForeignKey('rbPrintTemplate.id'), nullable=False, comment='ID шаблона {rbPrintTemplate}')
    createPersonId = Column(Integer, ForeignKey('Person.id'), nullable=False, comment='Создатель записи {Person}')
    status = Column(Integer, default=2, nullable=False, comment='Статус сообщения (0 - ошибка, 1 - принят, 2 - не отправлен)')
    description = Column(Text, nullable=True, comment='Описание')
    messageId = Column(String(64), nullable=True, comment='ID сообщения')
    doc_date = Column(Date, nullable=False, comment='Дата формирования документа')
    doc_version = Column(Integer, nullable=False, comment='Версия документа')
    mis_messageId = Column(String(64), nullable=False, comment='МИС message Id')
    IEMKEventLog_id = Column(Integer, ForeignKey('IEMKEventLog.id'), nullable=True, comment='Идентификатор посылки {IEMKEventLog}')
    file_path = Column(String(512), nullable=True, comment='Путь до файла')
    file_name = Column(String(512), nullable=True, comment='Название файла')
    sign_path = Column(String(512), nullable=True, comment='Путь до файла-подписи')
    certOwner = Column(String(512), nullable=True, comment='Владелец подписи {G, SN}')
    certSerial = Column(String(128), nullable=True, comment='Серийный номер {Serial}')
    notValidBefore = Column(DateTime, nullable=True, comment='Дата выдачи {Not valid before}')
    notValidAfter = Column(DateTime, nullable=True, comment='Дата окончания {Not valid after}')
    ownerOrganisation = Column(String(512), nullable=True, comment='Организация {O}')

    # client = relationship('Client', backref='signed_documents')
    # event = relationship('Event', backref='signed_documents')
    # action = relationship('Action', backref='signed_documents')
    # person = relationship('Person', foreign_keys=[person_id], backref='signed_documents')
    # file = relationship('ClientFile', foreign_keys=[file_id], backref='document_files')
    # sign = relationship('ClientFile', foreign_keys=[sign_id], backref='signature_files')
    # template = relationship('rbPrintTemplate', backref='signed_documents')
    # creator = relationship('Person', foreign_keys=[createPersonId], backref='created_signed_documents')
    # iemk_event_log = relationship('IEMKEventLog', backref='signed_documents')

    def __repr__(self):
        return (
            f"<SignedIEMKDocument(id={self.id}, client_id={self.client_id}, "
            f"event_id={self.event_id}, document_code={self.document_code})>"
        )


class IEMKEventLog(Base):
    __tablename__ = 'IEMKEventLog'

    id = Column(Integer, primary_key=True, autoincrement=True)
    event_id = Column(Integer, ForeignKey('Event.id'), nullable=False, comment='{Event}')
    sendDate = Column(DateTime, nullable=True, comment='Дата и время отправки данных')
    status = Column(SmallInteger, default=0, nullable=True, comment='Статус отправки: 0 - не отправлено, 1 - отправлено, 2 - успешно отправлено, 3 - отправлено с ошибкой')
    error_code = Column(SmallInteger, default=0, nullable=False, comment='Отметка об ошибке: 0 - успешно выгрузился')
    error_message = Column(Text, nullable=True, comment='Текст ошибки - если есть')
    method = Column(String(32), nullable=True, comment='Метод')
    action_id = Column(Integer, ForeignKey('Action.id'), nullable=True, comment='Идентификатор действия {Action}')
    diagnosis_id = Column(Integer, ForeignKey('Diagnosis.id'), nullable=True, comment='Идентификатор диагноза {Diagnosis}')
    client_id = Column(Integer, ForeignKey('Client.id'), nullable=True, comment='Идентификатор пациента {Client}')
    createDateTime = Column(DateTime, default='CURRENT_TIMESTAMP', nullable=False, comment='Дата создания записи')
    local_error = Column(Text, default='', nullable=True, comment='Локальная ошибка')
    subcases_number = Column(Integer, default=1, nullable=False, comment='Количество подслучаев')
    idCaseMis = Column(String(32), nullable=True, comment='IdCaseMis')
    document_id = Column(Integer, ForeignKey('SignedIEMKDocument.id'), nullable=True, comment='{SignedIEMKDocument}')

    # event = relationship('Event', backref='iemk_logs')
    # action = relationship('Action', backref='iemk_logs')
    # diagnosis = relationship('Diagnosis', backref='iemk_logs')
    # client = relationship('Client', backref='iemk_logs')
    # document = relationship('SignedIEMKDocument', backref='iemk_logs')

    def __repr__(self):
        return (
            f"<IEMKEventLog(id={self.id}, event_id={self.event_id}, status={self.status}, "
            f"subcases_number={self.subcases_number})>"
        )


class Action(Base):
    __tablename__ = 'Action'

    id = Column(Integer, primary_key=True, autoincrement=True)
    createDatetime = Column(DateTime, nullable=False, comment='Дата создания записи')
    createPerson_id = Column(Integer, ForeignKey('Person.id'), nullable=True, comment='Автор записи {Person}')
    modifyDatetime = Column(DateTime, nullable=False, comment='Дата изменения записи')
    modifyPerson_id = Column(Integer, ForeignKey('Person.id'), nullable=True, comment='Автор изменения записи {Person}')
    deleted = Column(Boolean, default=False, nullable=False, comment='Отметка удаления записи')
    actionType_id = Column(Integer, ForeignKey('ActionType.id'), nullable=False, comment='Тип события {ActionType}')
    specifiedName = Column(String(255), default='', nullable=False, comment='Уточнённое наименование')
    event_id = Column(Integer, ForeignKey('Event.id'), nullable=True, comment='Событие, к которому относится действие {Event}')
    idx = Column(Integer, default=0, nullable=False, comment='Индекс в списке событий')
    directionDate = Column(DateTime, nullable=True, comment='Дата назначения')
    status = Column(SmallInteger, nullable=False, comment='Статус выполнения')
    setPerson_id = Column(Integer, ForeignKey('Person.id'), nullable=True, comment='Назначивший {Person}')
    isUrgent = Column(Boolean, default=False, nullable=False, comment='Является срочным')
    begDate = Column(DateTime, nullable=True, comment='Дата начала работы')
    plannedEndDate = Column(DateTime, nullable=False, comment='Плановая дата выполнения')
    endDate = Column(DateTime, nullable=True, comment='Дата окончания работы')
    note = Column(Text, nullable=False, comment='Примечания')
    person_id = Column(Integer, ForeignKey('Person.id'), nullable=True, comment='Исполнитель {Person}')
    office = Column(String(16), nullable=False, comment='Кабинет')
    amount = Column(Double, nullable=False, comment='Количество')
    uet = Column(Double, default=0, nullable=True, comment='УЕТ (Условные Единицы Трудозатрат)')
    expose = Column(Boolean, default=True, nullable=False, comment='Выставлять счёт')
    payStatus = Column(Integer, nullable=False, comment='Флаги финансирования')
    account = Column(Boolean, nullable=False, comment='Флаг Считать')
    MKB = Column(String(8), nullable=False, comment='Шифр МКБ действия')
    morphologyMKB = Column(String(16), nullable=False, comment='Морфология диагноза МКБ')
    finance_id = Column(Integer, ForeignKey('rbFinance.id'), nullable=True, comment='Тип финансирования {rbFinance}')
    contract_id = Column(Integer, ForeignKey('Contract.id'), nullable=True, comment='Договор {Contract}')
    prescription_id = Column(Integer, ForeignKey('Action.id'), nullable=True, comment='Ссылка на назначение {Action}')
    takenTissueJournal_id = Column(Integer, ForeignKey('TakenTissueJournal.id'), nullable=True, comment='Ссылка на журнал забора тканей {TakenTissueJournal}')
    org_id = Column(Integer, ForeignKey('Organisation.id'), nullable=True, comment='Организация выполнившая действие {Organisation}')
    coordDate = Column(DateTime, nullable=True, comment='Дата и время согласования')
    coordAgent = Column(String(128), default='', nullable=False, comment='Сотрудник ЛПУ, согласовавший действие')
    coordInspector = Column(String(128), default='', nullable=False, comment='Представитель плательщика, согласовавший действие')
    coordText = Column(Text, nullable=False, comment='Текст согласования')
    assistant_id = Column(Integer, ForeignKey('Person.id'), nullable=True, comment='Ассистент {Person}')
    preliminaryResult = Column(SmallInteger, default=0, nullable=False, comment='Предварительный результат')
    duration = Column(SmallInteger, default=0, nullable=False, comment='Длительность')
    periodicity = Column(SmallInteger, default=0, nullable=False, comment='Периодичность')
    aliquoticity = Column(SmallInteger, default=0, nullable=False, comment='Кратность')
    assistant2_id = Column(Integer, ForeignKey('Person.id'), nullable=True, comment='Второй ассистент {Person}')
    assistant3_id = Column(Integer, ForeignKey('Person.id'), nullable=True, comment='Третий ассистент {Person}')
    packPurchasePrice = Column(Double, default=0, nullable=False, comment='Закупочная стоимость упаковки')
    doseRatePrice = Column(Double, default=0, nullable=False, comment='Стоимость дозы')
    MES_id = Column(Integer, ForeignKey('mes.MES.id'), nullable=True, comment='МЭС {mes.MES}')
    hmpKind_id = Column(Integer, ForeignKey('rbHighTechCureKind.id'), nullable=True, comment='Вид высокотехнологичной помощи {rbHighTechCureKind}')
    hmpMethod_id = Column(Integer, ForeignKey('rbHighTechCureMethod.id'), nullable=True, comment='Метод высокотехнологичной помощи {rbHighTechCureMethod}')
    counterValue = Column(String(30), nullable=True, comment='Значение счетчика типов действия')
    customSum = Column(Double, default=0, nullable=False, comment='Ручной ввод цены')
    parent_id = Column(Integer, ForeignKey('Action.id'), nullable=True, comment='Старшее действие {Action}')
    isVerified = Column(Boolean, default=False, nullable=False, comment='Флаг проверки выполнения действия')
    importDate = Column(DateTime, nullable=True, comment='Дата импорта действия из внешней системы')
    signature = Column(SmallInteger, default=0, nullable=False, comment='Подписан в ДР')
    uetDoctors = Column(Double, nullable=True, comment='Дополнительный УЕТ')
    notificationStatus = Column(SmallInteger, default=0, nullable=False, comment='Статус уведомления')
    referralPurpose = Column(Text, nullable=True, comment='Код МКБ и цель консультации')
    referredPerson = Column(Text, nullable=True, comment='ФИО и профиль специалиста, который выписал направление')

    event = relationship('Event', backref='actions')
    # action_type = relationship('ActionType', backref='actions')
    set_person = relationship('Person', foreign_keys=[setPerson_id], backref='set_actions')
    person = relationship('Person', foreign_keys=[person_id], backref='performed_actions')
    assistant = relationship('Person', foreign_keys=[assistant_id], backref='assisted_actions')
    assistant2 = relationship('Person', foreign_keys=[assistant2_id], backref='assisted2_actions')
    assistant3 = relationship('Person', foreign_keys=[assistant3_id], backref='assisted3_actions')

    def __repr__(self):
        return f"<Action(id={self.id}, specifiedName={self.specifiedName}, status={self.status})>"


class RbPrintTemplate(Base):
    __tablename__ = 'rbPrintTemplate'

    id = Column(Integer, primary_key=True, autoincrement=True)
    createDatetime = Column(DateTime, nullable=False, comment='Дата создания записи')
    createPerson_id = Column(Integer, ForeignKey('Person.id'), nullable=True, comment='Автор записи (внешний id)')
    modifyDatetime = Column(DateTime, nullable=False, comment='Дата изменения записи')
    modifyPerson_id = Column(Integer, ForeignKey('Person.id'), nullable=True, comment='Автор изменения записи {Person}')
    code = Column(String(16), nullable=False, comment='Код')
    name = Column(String(255), nullable=False, comment='Наименование')
    context = Column(String(64), nullable=False, comment='Контекст (order, token, F131 и т.п.) ')
    fileName = Column(String(128), nullable=False, comment='Имя файла шаблона')
    default = Column(Text, nullable=True)
    dpdAgreement = Column(Boolean, default=False, nullable=False, comment='Меняет ли ДПД клиента при печати: 0-Не меняет, 1-Меняет на "Да", 2-Меняет на "Нет" ')
    type = Column(Boolean, default=False, nullable=False, comment='Тип шаблона: 0-HTML,1-Exaro,2-SVG')
    banUnkeptDate = Column(Boolean, default=False, nullable=False, comment='0=разрешено, 1=запрещено')
    counter_id = Column(Integer, nullable=True, comment='Используемый счетчик при печати из обращений')
    deleted = Column(Boolean, default=False, nullable=False, comment='отметка об удалении')
    isPatientAgreed = Column(Boolean, default=False, nullable=True, comment='Необходимость согласования с клиентом')
    groupName = Column(String(20), nullable=True, comment='Группа')
    hideParam = Column(Boolean, default=False, nullable=False, comment='2-скрыть у врачей')
    documentType_id = Column(Integer, nullable=True, comment='Тип документа по ИЭМК')
    isEditableInWeb = Column(Boolean, default=True, nullable=False)
    chkProfiles = Column(Boolean, default=False, nullable=False, comment='Доступно только определённым правам пользователей')
    chkPersons = Column(Boolean, default=False, nullable=False, comment='Доступно только определённым пользователям')
    pageOrientation = Column(Enum('P', 'L'), default='P', nullable=False, comment='Ориентация страницы')
    sendMail = Column(Boolean, default=False, nullable=False, comment='Использовать для отправки электронной почты: 0-нет, 1-да')
    leftMargin = Column(SmallInteger, default=0, nullable=True)

    __table_args__ = (
        {'comment': 'Шаблоны для печати'},
    )


class RbIEMKDocument(Base):
    __tablename__ = 'rbIEMKDocument'

    id = Column(Integer, primary_key=True, autoincrement=True)
    code = Column(String(64), nullable=False, comment='Название документа в терминах ИЭМК')
    name = Column(String(255), nullable=False, comment='Пояснение к названию')
    applicability = Column(Integer, nullable=False, comment='Применимость: 0 — не примениемо, 1 — поликлиника, 2 — стационар, 3 — поликлиника и стационар')
    mark = Column(Boolean, nullable=True, comment='0 - внутренний документ, 1 - внешний документ')
    actionType_id = Column(Integer, ForeignKey('ActionType.id'), nullable=True, comment='{ActionType}')
    EGISZ_code = Column(String(16), nullable=True, comment='Код СМС')
    netrica_Code = Column(String(5), nullable=True, comment='1.2.643.2.69.1.1.1.195')
    type = Column(String(10), nullable=True, comment='pdf/xml')
    IEMK_OID = Column(String(64), nullable=True, comment='OID документа')
    isVisibleInJobTicket = Column(Boolean, default=False, nullable=True, comment='Доступно подписание в "Выполнении работ"')

    __table_args__ = (
        {'comment': 'Справочник посылаемых документов ИЭМК'},
    )


class EventType(Base):
    __tablename__ = 'EventType'

    id = Column(Integer, primary_key=True, autoincrement=True)
    createDatetime = Column(DateTime, nullable=False, comment='Дата создания записи')
    createPerson_id = Column(Integer, ForeignKey('Person.id'), nullable=True, comment='Автор записи {Person}')
    modifyDatetime = Column(DateTime, nullable=False, comment='Дата изменения записи')
    modifyPerson_id = Column(Integer, ForeignKey('Person.id'), nullable=True, comment='Автор изменения записи {Person}')
    deleted = Column(Boolean, default=False, nullable=False, comment='Отметка удаления записи')
    code = Column(String(8), nullable=False, comment='Код')
    name = Column(String(64), nullable=False, comment='Наименование')
    purpose_id = Column(Integer, ForeignKey('rbEventTypePurpose.id'), nullable=True, comment='Назначение типа события; цель {rbEventTypePurpose}')
    finance_id = Column(Integer, ForeignKey('rbFinance.id'), nullable=True, comment='Тип финансирования {rbFinance}')
    scene_id = Column(Integer, ForeignKey('rbScene.id'), nullable=True, comment='Место визита по умолчанию {rbScene}')
    visitServiceModifier = Column(String(128), nullable=False, comment='Модификатор сервиса')
    visitServiceFilter = Column(String(32), nullable=False, comment='Фильтрация списка услуг визитов')
    visitFinance = Column(Boolean, default=False, nullable=False, comment='0-по событию, 1-финансирование визита определяется по врачу визита')
    actionFinance = Column(SmallInteger, default=1, nullable=False, comment='0-aвтоматически не заполнять, 1-по событию, 2-по назначившему, 3-по исполнителю')
    actionContract = Column(Boolean, default=False, nullable=False, comment='0-aвтоматически не заполнять, 1-при возможности заполнять по событию')
    period = Column(SmallInteger, nullable=False, comment='Период, целое число, период в месяцах')
    singleInPeriod = Column(SmallInteger, nullable=False, comment='Период повторения')
    isLong = Column(Boolean, default=False, nullable=False, comment='Является продолжительным')
    dateInput = Column(SmallInteger, default=0, nullable=False, comment='Дисциплина ввода дат при создании события')
    service_id = Column(Integer, ForeignKey('rbService.id'), nullable=True, comment='Базовый сервис ОМС {rbService}')
    context = Column(String(64), nullable=False, comment='Контекст печати')
    form = Column(String(64), nullable=False, comment='Код формы, используемой для редактирования событий данного типа')
    minDuration = Column(Integer, default=0, nullable=False, comment='Минимальная длительность события')
    maxDuration = Column(Integer, default=0, nullable=False, comment='Максимальная длительность')
    showStatusActionsInPlanner = Column(Boolean, default=True, nullable=False, comment='Показывать типы действия класса Статус в планировщике')
    showDiagnosticActionsInPlanner = Column(Boolean, default=True, nullable=False, comment='Показывать типы действия класса Диагностика в планировщике')
    showCureActionsInPlanner = Column(Boolean, default=True, nullable=False, comment='Показывать типы действия класса Лечение в планировщике')
    showMiscActionsInPlanner = Column(Boolean, default=True, nullable=False, comment='Показывать типы действия класса Прочие мероприятия в планировщике')
    limitStatusActionsInput = Column(Boolean, default=False, nullable=False, comment='Ограничить ввод действий класса Статус')
    limitDiagnosticActionsInput = Column(Boolean, default=False, nullable=False, comment='Ограничить ввод действий класса Диагностика')
    limitCureActionsInput = Column(Boolean, default=False, nullable=False, comment='Ограничить ввод действий класса Лечение')
    limitMiscActionsInput = Column(Boolean, default=False, nullable=False, comment='Ограничить ввод действий класса Прочие мероприятия')
    showTime = Column(Boolean, default=False, nullable=False, comment='Показывать в интерфейсе не только дату, но и время назначения/окончания')
    medicalAidKind_id = Column(Integer, ForeignKey('rbMedicalAidKind.id'), nullable=True, comment='Вид мед.помощи {rbMedicalAidKind}')
    medicalAidType_id = Column(Integer, ForeignKey('rbMedicalAidType.id'), nullable=True, comment='Тип мед.помощи {rbMedicalAidType}')
    eventProfile_id = Column(Integer, ForeignKey('rbEventProfile.id'), nullable=True, comment='Профиль события {rbEventProfile}')
    mesRequired = Column(Boolean, default=False, nullable=False, comment='Требуется указание МЭС')
    defaultMesSpecification_id = Column(Integer, ForeignKey('rbMesSpecification.id'), nullable=True, comment='Особенность выполнения МЭС по умолчанию')
    mesCodeMask = Column(String(64), default='', nullable=True, comment='Шаблон кода МЭС (для like)')
    mesNameMask = Column(String(64), default='', nullable=True, comment='Шаблон имени МЭС (для like)')
    counter_id = Column(Integer, ForeignKey('rbCounter.id'), nullable=True, comment='Счетчик события {rbCounter}')
    isExternal = Column(Boolean, default=False, nullable=False, comment='Требуется ввод внешнего идентификатора')
    generateExternalIdOnSave = Column(Boolean, default=False, nullable=False, comment='Устаревшее поле, подлежит удалению')
    externalIdAsAccountNumber = Column(Boolean, default=False, nullable=False, comment='Использовать внешний идентификатор в качестве номера счета')
    counterType = Column(SmallInteger, default=0, nullable=False, comment='Использование счетчика')
    hasAssistant = Column(Boolean, default=False, nullable=False, comment='Требуется ввод ассистента')
    hasCurator = Column(Boolean, default=False, nullable=False, comment='Требуется ввод куратора')
    hasVisitAssistant = Column(Boolean, default=False, nullable=False, comment='Требуется ввод ассистента визита')
    canHavePayableActions = Column(Boolean, default=False, nullable=False, comment='Признак: может иметь платные услуги')
    isRequiredCoordination = Column(Boolean, default=False, nullable=False, comment='Требуется обязательное согласование')
    isOrgStructurePriority = Column(Boolean, default=False, nullable=False, comment='Приоритет подразделения для функции "Добавить ..." в событии')
    isTakenTissue = Column(Boolean, default=False, nullable=False, comment='Использует забор тканей')
    isSetContractNumFromCounter = Column(Boolean, nullable=True, comment='Флаг назначения договору номера из счетчика')
    sex = Column(SmallInteger, default=0, nullable=False, comment='Применимо для указанного пола (0-любой, 1-М, 2-Ж)')
    age = Column(String(220), nullable=False, comment='Применимо для указанного интервала возрастов')
    isOnJobPayedFilter = Column(Boolean, default=False, nullable=False, comment='Учитывать настройки вывода работ по оплате')
    permitAnyActionDate = Column(Boolean, nullable=False)
    prefix = Column(String(8), nullable=True, comment='Префикс внешнего идентификатора')
    exposeGrouped = Column(SmallInteger, default=0, nullable=False, comment='Группировать при выгрузке с другими событиями')
    showLittleStranger = Column(Boolean, default=False, nullable=False, comment='Показывать блок "Признак новорожденного"')
    uniqueExternalId = Column(Boolean, default=True, nullable=False, comment='Проверять внешний идентификатор на уникальность')
    uniqueExternalIdInThisYear = Column(Boolean, nullable=True, comment='Проверять на уникальность в текущем году')
    defaultOrder = Column(SmallInteger, default=1, nullable=False, comment='Порядок наступления по умолчанию')
    inheritDiagnosis = Column(Boolean, default=False, nullable=False, comment='Наследовать диагноз из предыдущего обращения')
    diagnosisSetDateVisible = Column(Boolean, default=False, nullable=False, comment='Визуализация столбца "Дата выявления диагноза"')
    isResetSetDate = Column(Boolean, default=False, nullable=False, comment='Сбрасывать дату начала обращения')
    isAvailInFastCreateMode = Column(Boolean, default=True, nullable=False, comment='Доступен в режиме быстрого создания обращения')
    caseCast_id = Column(Integer, ForeignKey('rbCaseCast.id'), nullable=True, comment='Тип случая лечения {rbCaseCast}')
    defaultEndTime = Column(Time, nullable=True, comment='Время окончания события по умолчанию')
    isCheck_KSG = Column(SmallInteger, nullable=True, comment='Имеется ли проверка КСГ')
    weekdays = Column(SmallInteger, default=5, nullable=False, comment='Продолжительность рабочей недели')
    exposeConfirmation = Column(Boolean, default=False, nullable=False, comment='Указывать, что событие может быть добавлено в счет')
    needMesPerformPercent = Column(SmallInteger, default=0, nullable=False, comment='Процент услуг, которые должны быть выполнены для данного МЭС')
    showZNO = Column(Boolean, nullable=True, comment='Отображать ввод ЗНО в интерфейсе')
    purposeFilter = Column(Boolean, default=False, nullable=True, comment='Фильтровать типы действия по цели')
    goalFilter = Column(Boolean, default=False, nullable=True, comment='Фильтровать типы действия по цели')
    setFilterStandard = Column(Boolean, default=False, nullable=False, comment='Набор фильтров для подстановки Стандарта')
    inheritResult = Column(Boolean, nullable=True, comment='Наследовать результат обращения')
    eventKind_id = Column(Integer, ForeignKey('rbEventKind.id'), nullable=True, comment='Вид события')
    inheritCheckupResult = Column(Boolean, nullable=True, comment='Наследовать результат осмотра')
    payerAutoFilling = Column(Boolean, nullable=True, comment='Автоматическое заполнение плательщика')
    dispByMobileTeam = Column(Boolean, nullable=True, comment='Флаг "Диспансеризация проведена мобильной выездной бригадой"')
    filterPosts = Column(Boolean, nullable=True)
    filterSpecialities = Column(Boolean, nullable=True)
    compulsoryServiceStopIgnore = Column(Boolean, nullable=True, comment='Игнорирование запрета на обслуживание ОМС')
    voluntaryServiceStopIgnore = Column(Boolean, nullable=True, comment='Игнорирование запрета на обслуживание ДМС')
    inheritGoal = Column(Boolean, default=False, nullable=False, comment='Наследовать цель обращения')
    MSE = Column(Boolean, nullable=True, comment='Флаг МСЭ')
    netrica_Code = Column(String(65), nullable=True, comment='Код NetRica')
    reqDN = Column(Boolean, nullable=True)
    reqHealthGroup = Column(Boolean, nullable=True)
    isAddTreatmentToDeath = Column(Boolean, nullable=False)
    needReferal = Column(Boolean, nullable=True, comment='Требуется направление')
    referalDateActualityDays = Column(Integer, nullable=True, comment='Актуальность даты направления')
    eventGoal = Column(Integer, ForeignKey('rbEventGoal.id'), nullable=True, comment='Цель обращения {rbEventGoal}')
    result = Column(Integer, ForeignKey('rbResult.id'), nullable=True, comment='Результат события {rbResult}')
    MKB = Column(String(8), nullable=True, comment='Результат события {MKB}')
    postfix = Column(String(200), nullable=True, comment='Дополнение externalId в выгрузке счетов по СПБ IllHistory')
    limitAnalysesActionsInput = Column(Boolean, default=False, nullable=False, comment='Ограничить ввод действий класса Анализы')
    isAutoPrint = Column(Boolean, nullable=True, comment='Автоматическая печать')
    chk_ZNO = Column(Boolean, nullable=True, comment='Проверки и умолчания ЗНО')
    chkMKB_ZNO = Column(Boolean, nullable=True, comment='Проверка МКБ')
    chkReason_ZNO = Column(Boolean, nullable=True, comment='Проверка повода обращения')
    chkstady_ZNO = Column(Boolean, nullable=True, comment='Проверка стадии заболевания')
    chkstady_T_ZNO = Column(Boolean, nullable=True, comment='Проверка стадии T')
    chkstady_N_ZNO = Column(Boolean, nullable=True, comment='Проверка стадии N')
    chkstady_M_ZNO = Column(Boolean, nullable=True, comment='Проверка стадии M')
    chkDate_ZNO = Column(Boolean, nullable=True, comment='Дата взятия материала')
    isKSGCriterion = Column(Boolean, nullable=True, comment='Дополнительный критерий КСГ')
    chkConsiliumData = Column(Boolean, nullable=True, comment='Проверка данных консилиума')
    chkSurgeryCure = Column(Boolean, nullable=True, comment='Хирургическое лечение')
    chkPillsTherapy = Column(Boolean, nullable=True, comment='Лекарственная терапия')
    chkRadiationTherapy = Column(Boolean, nullable=True, comment='Лучевая терапия')
    chkChemyTherapy = Column(Boolean, nullable=True, comment='Химиолучевая терапия')
    chk_SendInIEMK = Column(Boolean, nullable=True, comment='Отправка в ИЭМК')
    isSeveralEvents = Column(Boolean, nullable=True)
    chkTransf = Column(Boolean, nullable=False, comment='Признак поступления')
    transfId = Column(Integer, ForeignKey('rbTransf.id'), nullable=True, comment='Признак поступления по умолчанию')
    isCheckExecutors = Column(Boolean, nullable=True, comment='Проверка соответствия исполнителей')
    hasDefaultSecretary = Column(Boolean, default=False, nullable=False, comment='Установлен секретарь по умолчанию')
    defaultSecretary_id = Column(Integer, ForeignKey('Person.id'), nullable=True, comment='Секретарь по умолчанию')
    chkF90 = Column(Boolean, default=True, nullable=False, comment='Форма 90')
    medicalPlace_id = Column(Integer, ForeignKey('rbMedicalPlace.id'), nullable=True, comment='Место оказания услуги')
    IEMKSend = Column(Boolean, default=False, nullable=False, comment='Автоматическая отправка в ИЭМК')
    canSend = Column(Boolean, default=False, nullable=False, comment='Выгружать во внешние системы')
    isKslpShow = Column(Boolean, nullable=True, comment='Показывать КСЛП')
    isFilterKSLP = Column(Boolean, nullable=True, comment='Фильтр КСЛП')
    isCheckSocStatus = Column(Boolean, default=False, nullable=False, comment='Проверка социального статуса')
    availableForExternal = Column(Boolean, nullable=True, comment='Доступен для внешних сервисов')
    visit_circumstances = Column(String(10), nullable=True, comment='Обстоятельства посещения')
    chkCheckMedicalSpecialtyServices = Column(Boolean, default=False, nullable=False, comment='Проверка услуг по специальности')
    isWithoutResponsiblePerson = Column(Boolean, nullable=True, comment='Без ответственного лица')
    isDnChoiceConstraint = Column(Boolean, nullable=True, comment='Ограничение выбора ДН')
    filterPersons = Column(Boolean, nullable=True)
    filterOrgstructure = Column(Boolean, nullable=True)
    defaultRationaleId = Column(Integer, ForeignKey('rbDiagnosisRationale.id'), nullable=True, comment='Умолчание выбора обоснования')
    defaultNosologyTypeId = Column(Integer, ForeignKey('rbDiagnosisNosologyType.id'), nullable=True, comment='Умолчание типа нозологии')
    chkMorphDiag = Column(Boolean, nullable=True, comment='Проверка морфологического диагноза')
    chkTumorTopography = Column(Boolean, nullable=True, comment='Проверка топографии опухоли')
    netricaCode_id = Column(Integer, ForeignKey('netricaEventType.id'), nullable=True, comment='Тип случая обслуживания NetRica')

    __table_args__ = (
        # {'comment': 'Тип события'},
        Index('code', 'code'),
        Index('createPerson_id', 'createPerson_id'),
        Index('et_deleted', 'deleted'),
        Index('et_deleted_code', 'deleted', 'code'),
        Index('eventProfile_id', 'eventProfile_id'),
        Index('finance_id', 'finance_id'),
        Index('fk_EventType_rbCaseCast_idx', 'caseCast_id'),
        Index('medicalAidKind_id', 'medicalAidKind_id'),
        Index('medicalAidType_id', 'medicalAidType_id'),
        Index('modifyPerson_id', 'modifyPerson_id'),
        Index('purpose_id', 'purpose_id'),
        Index('scene_id', 'scene_id'),
        Index('service_id', 'service_id')
    )


class ActionType(Base):
    __tablename__ = 'ActionType'

    id = Column(Integer, primary_key=True, autoincrement=True)
    createDatetime = Column(DateTime, nullable=False, comment='Дата создания записи')
    createPerson_id = Column(Integer, ForeignKey('Person.id'), nullable=True, comment='Автор записи {Person}')
    modifyDatetime = Column(DateTime, nullable=False, comment='Дата изменения записи')
    modifyPerson_id = Column(Integer, ForeignKey('Person.id'), nullable=True, comment='Автор изменения записи {Person}')
    deleted = Column(Boolean, default=False, nullable=False, comment='Отметка удаления записи')
    class_ = Column(SmallInteger, nullable=False, comment='0-статус, 1-диагностика, 2-лечение, 3-прочие мероприятия')
    group_id = Column(Integer, ForeignKey('ActionType.id'), nullable=True, comment='Поле для группировки действия {ActionType}')
    code = Column(String(20), nullable=False, comment='Код')
    name = Column(String(255), nullable=False, comment='Наименование действия')
    title = Column(String(255), nullable=False, comment='Наименование для печати')
    flatCode = Column(String(64), nullable=False, comment='Уникальный "плоский" код')
    sex = Column(SmallInteger, nullable=False, comment='Применимо для указанного пола (0-любой, 1-М, 2-Ж)')
    age = Column(String(9), nullable=False, comment='Применимо для указанного интервала возрастов')
    office = Column(String(32), nullable=False, comment='Кабинет по умолчанию')
    showInForm = Column(Boolean, nullable=False, comment='Разрешается выбор в формах ввода событий')
    genTimetable = Column(Boolean, nullable=False, comment='Генерировать график (приём)')
    quotaType_id = Column(Integer, ForeignKey('QuotaType.id'), nullable=True, comment='Вид квоты {QuotaType}')
    context = Column(String(64), nullable=False, comment='Контекст печати')
    amount = Column(Float, default=1, nullable=False, comment='Количество по умолчанию')
    amountEvaluation = Column(SmallInteger, default=0, nullable=False, comment='Метод вычисления количества')
    defaultStatus = Column(SmallInteger, default=0, nullable=False, comment='Значение по умолчанию для статуса выполнения')
    defaultDirectionDate = Column(SmallInteger, default=0, nullable=False, comment='Дата назначения по умолчанию')
    defaultPlannedEndDate = Column(Boolean, nullable=False, comment='Планируемая дата выполнения')
    defaultEndDate = Column(SmallInteger, default=0, nullable=False, comment='Дата выполнения события по умолчанию')
    defaultExecPerson_id = Column(Integer, ForeignKey('Person.id'), nullable=True, comment='Ответственный за действие по умолчанию')
    defaultSetPerson_id = Column(Integer, ForeignKey('Person.id'), nullable=True, comment='Назначивший действие по умолчанию')
    defaultPersonInEvent = Column(SmallInteger, default=0, nullable=False, comment='Исполнитель в редакторе события')
    defaultPersonInEditor = Column(SmallInteger, default=0, nullable=False, comment='Исполнитель в отдельном редакторе')
    defaultMKB = Column(Boolean, default=False, nullable=False, comment='Правило заполнения по умолчанию поля Action.`MKB`')
    defaultMorphology = Column(Boolean, default=False, nullable=False, comment='Правило заполнения по умолчанию поля Action.`morphologyMKB`')
    isMorphologyRequired = Column(SmallInteger, default=0, nullable=False, comment='Требуется заполнение морфологии')
    defaultOrg_id = Column(Integer, ForeignKey('Organisation.id'), nullable=True, comment='Организация выполняющая действие по умолчанию {Organisation}')
    showTime = Column(Boolean, default=False, nullable=False, comment='Показывать время назначения/начала/окончания')
    maxOccursInEvent = Column(Integer, default=0, nullable=False, comment='Ограничение регистрации действий по количеству в событии')
    isMES = Column(Integer, nullable=True, comment='Является стандартом')
    nomenclativeService_id = Column(Integer, ForeignKey('rbService.id'), nullable=True, comment='Номенклатурная услуга {rbService}')
    isPreferable = Column(Boolean, default=True, nullable=False, comment='Является предпочитаемым в ЛПУ')
    prescribedType_id = Column(Integer, ForeignKey('ActionType.id'), nullable=True, comment='Предписываемое действие {ActionType}')
    shedule_id = Column(Integer, ForeignKey('rbActionShedule.id'), nullable=True, comment='График по умолчанию {rbActionShedule}')
    isRequiredCoordination = Column(Boolean, default=False, nullable=False, comment='Требуется обязательное согласование')
    isNomenclatureExpense = Column(Boolean, default=False, nullable=False, comment='Является тратой ЛСиИМН')
    hasAssistant = Column(SmallInteger, default=0, nullable=False, comment='Ввод ассистента')
    propertyAssignedVisible = Column(Boolean, default=True, nullable=False, comment='Визуализация "назначено" в свойствах действия')
    propertyUnitVisible = Column(Boolean, default=True, nullable=False, comment='Визуализация "ед.изм." в свойствах действия')
    propertyNormVisible = Column(Boolean, default=True, nullable=False, comment='Визуализация "норма" в свойствах действия')
    propertyEvaluationVisible = Column(Boolean, default=True, nullable=False, comment='Визуализация "оценка" в свойствах действия')
    serviceType = Column(SmallInteger, default=0, nullable=False, comment='Вид услуги')
    actualAppointmentDuration = Column(SmallInteger, default=0, nullable=False, comment='Актуальность при назначении')
    isSubstituteEndDateToEvent = Column(Boolean, default=False, nullable=False, comment='Подстановка даты окончания действия')
    isPrinted = Column(Boolean, default=True, nullable=False, comment='Выводить на печать действие этого типа')
    defaultMES = Column(SmallInteger, default=0, nullable=False, comment='МЭС по умолчанию')
    frequencyCount = Column(Integer, default=0, nullable=False, comment='Частота повторного назначения')
    frequencyPeriod = Column(SmallInteger, default=0, nullable=False, comment='Размер периода для контроля частоты')
    frequencyPeriodType = Column(SmallInteger, default=0, nullable=False, comment='Тип периода для контроля частоты')
    isStrictFrequency = Column(Boolean, default=False, nullable=False, comment='Жесткая проверка частоты')
    isFrequencyPeriodByCalendar = Column(Boolean, default=False, nullable=False, comment='Использовать календарные периоды')
    counter_id = Column(Integer, nullable=True, comment='Счетчик')
    isCustomSum = Column(Boolean, default=False, nullable=False, comment='Ручной ввод цены')
    recommendationExpirePeriod = Column(Integer, default=0, nullable=True, comment='Срок актуальности направления')
    recommendationControl = Column(Boolean, default=False, nullable=True, comment='Контроль назначившего')
    isExecRequiredForEventExec = Column(Boolean, default=True, nullable=False, comment='Необходимо состояние "начато" для закрытия')
    locked = Column(Boolean, default=False, nullable=False, comment='Удаление разрешено только администратору')
    isActiveGroup = Column(Boolean, nullable=False, comment='Параметры дочерних действий')
    lis_code = Column(String(32), nullable=True, comment='Код анализа в ЛИС')
    filledLock = Column(Boolean, nullable=True, comment='Запрещать удаление если заполнено свойство')
    defaultBeginDate = Column(SmallInteger, default=0, nullable=False, comment='Дата начала действия по умолчанию')
    refferalType_id = Column(Integer, ForeignKey('Person.id'), nullable=True, comment='Тип направления')
    filterPosts = Column(Boolean, nullable=True)
    filterSpecialities = Column(Boolean, nullable=True)
    isIgnoreEventExecDate = Column(Boolean, nullable=True, comment='Игнорировать дату окончания события')
    advancePaymentRequired = Column(Boolean, nullable=True, comment='Требует авансирования')
    checkPersonSet = Column(Boolean, nullable=True, comment='Проверять на наличие исполнителя')
    defaultIsUrgent = Column(Boolean, default=False, nullable=False, comment='Срочность по умолчанию')
    checkEnterNote = Column(Boolean, nullable=True, comment='Требуется заполнение примечания')
    formulaAlias = Column(String(10), nullable=True, comment='Короткий алиас для формул автозаполнения')
    EGISZ_code = Column(String(512), nullable=False, comment='ОИД справочника сайта мин. здра')
    isAllowedAfterDeath = Column(Boolean, nullable=True)
    isAllowedDateAfterDeath = Column(Boolean, nullable=True)
    consultationTypeId = Column(Integer, ForeignKey('rbConsultationType.id'), nullable=True, comment='Тип консультации')
    eventStatusMod = Column(SmallInteger, nullable=True)
    instrumentalId = Column(Integer, ForeignKey('rbInstrumentalResearchMethods.id'), nullable=True, comment='Вид инструментальной диагностики')
    defaultSetPersonInEvent = Column(SmallInteger, nullable=True)
    showAPOrg = Column(Boolean, nullable=True)
    showAPNotes = Column(Boolean, nullable=True)
    withoutAgree = Column(Boolean, nullable=True)
    checkUetDoctors = Column(Boolean, nullable=True, comment='Проверка по специальности')
    needReferral = Column(Boolean, nullable=True, comment='Требует направления')
    visible = Column(Boolean, nullable=False, comment='Действие доступно для выбора')
    PERIOD = Column(SmallInteger, nullable=True, comment='Количество действий в месяц')
    singleInPeriod = Column(SmallInteger, nullable=True, comment='Период повторения')
    checkPeriod = Column(Boolean, default=False, nullable=False, comment='Проверка периода')
    EGISZ_typecons_code = Column(String(255), nullable=True, comment='Тип консультации EGISZ')
    SMS = Column(String(255), nullable=True, comment='Справочник СМС')
    SEMD = Column(String(255), nullable=True, comment='Справочник СЭМД')
    old_group_id = Column(Integer, nullable=True)
    old_id = Column(Integer, nullable=True)
    isUsedForWriteoff = Column(Boolean, nullable=True, comment='Использовать действие для списания')

    __table_args__ = (
        # {'comment': 'Описание мероприятия, связанного с событием'},
        Index('at_deleted', 'deleted'),
        Index('at_deleted_code', 'deleted', 'code'),
        Index('class', 'class_'),
        Index('code', 'code'),
        Index('createPerson_id', 'createPerson_id'),
        Index('flatCode', 'flatCode'),
        Index('group_id', 'group_id'),
        Index('lis_code', 'lis_code'),
        Index('modifyPerson_id', 'modifyPerson_id'),
        Index('nomenclativeService_id', 'nomenclativeService_id'),
        Index('prescribedType_id', 'prescribedType_id'),
        Index('quotaType_id', 'quotaType_id'),
        Index('shedule_id', 'shedule_id'),
    )